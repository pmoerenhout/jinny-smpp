package com.jinny.smpp.charset;

import java.nio.charset.Charset;

/**
 ** Use the freenet JCharset structures
 */

public class SmppJinnyCharset extends ByteLookupCharset {

  static final String NAME = "X-SMPP-JINNY";

  static final String[] ALIASES = { "x-smpp-jinny", "smpp-jinny", "smppjinny" };

  static final int[] BYTE_TO_CHAR = {
      0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0006, 0x0007,
      0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f,
      0x0394, 0x0011, 0x03a6, 0x0393, 0x039b, 0x03a9, 0x03a0, 0x03a8,
      0x03a3, 0x03b8, 0x039e, 0x001b, 0x001c, 0x001d, 0x001e, 0x20ac,
      0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x0027,
      0x0028, 0x0029, 0x002a, 0x002b, 0x002c, 0x002d, 0x002e, 0x002f,
      0x0030, 0x0031, 0x0032, 0x0033, 0x0034, 0x0035, 0x0036, 0x0037,
      0x0038, 0x0039, 0x003a, 0x003b, 0x003c, 0x003d, 0x003e, 0x003f,
      0x0040, 0x0041, 0x0042, 0x0043, 0x0044, 0x0045, 0x0046, 0x0047,
      0x0048, 0x0049, 0x004a, 0x004b, 0x004c, 0x004d, 0x004e, 0x004f,
      0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0x0056, 0x0057,
      0x0058, 0x0059, 0x005a, 0x005b, 0x005c, 0x005d, 0x005e, 0x005f,
      0x0060, 0x0061, 0x0062, 0x0063, 0x0064, 0x0065, 0x0066, 0x0067,
      0x0068, 0x0069, 0x006a, 0x006b, 0x006c, 0x006d, 0x006e, 0x006f,
      0x0070, 0x0071, 0x0072, 0x0073, 0x0074, 0x0075, 0x0076, 0x0077,
      0x0078, 0x0079, 0x007a, 0x007b, 0x007c, 0x007d, 0x007e, 0x007f,
      0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
      0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
      0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,      // 0x90 - 0x97
      0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,      // 0x98 - 0x9f
      0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,      // 0xa0 - 0xa7
      0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00A3,      // 0xa8 - 0xaf
      0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00E7, 0x00B5, 0x00D1, 0x00F1,      // 0xb0 - 0xb7
      0x00A1, 0x00BF, 0x00A4, 0x00BB, 0x00A5, 0x00A7, 0x00BE, 0x00BF,      // 0xb8 - 0xbf
      0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C9, 0x00C6, 0x00C7,      // 0xc0 - 0xc7
      0x00C0, 0x00E8, 0x00F2, 0x00F9, 0x00E4, 0x00CD, 0x00F6, 0x00FC,      // 0xc8 - 0xcf
      0x00C5, 0x00D1, 0x00D8, 0x00C6, 0x00C5, 0x00D5, 0x00F8, 0x00E6,      // 0xd0 - 0xd7
      0x00C4, 0x00EC, 0x00D6, 0x00DC, 0x00C9, 0x00DD, 0x00DE, 0x00DF,      // 0xd8 - 0xdf
      0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,      // 0xe0 - 0xe7
      0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,      // 0xe8 - 0xef
      0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,      // 0xf0 - 0xf7
      0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF       // 0xf8 - 0xff
  };

  static final int[][] CHAR_TO_BYTE = createInverseLookupTable(BYTE_TO_CHAR);

  /**
   * Constructs an instance of the Jinny SMPP charset.
   */
  public SmppJinnyCharset() {
    super(NAME, ALIASES, BYTE_TO_CHAR, CHAR_TO_BYTE);
  }

  public boolean contains(Charset var1) {
    return var1.name().equals("US-ASCII") || var1 instanceof SmppJinnyCharset;
  }
}
